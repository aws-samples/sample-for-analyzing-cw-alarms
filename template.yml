AWSTemplateFormatVersion: '2010-09-09'
Description: 'Resources required for the CloudWatch alarm analyser'

Parameters:
  EnvironmentName:
    Type: String
    Default: 'dev'
  S3BucketName:
    Type: String
    Description: 'S3 bucket containing source code'
  S3SourceFile:
    Type: String
    Description: 'Path to source file in S3'
    Default: "alarm_evaluator.py"
  BedrockRegion:
    Type: String
    Description: Which region do you need to use for Bedrock
    Default:  "us-west-2"

Resources:

  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-VPC

  InternetGateway:
    Type: AWS::EC2::InternetGateway

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: !Select [0, !GetAZs '']
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-PublicSubnet1

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: !Select [1, !GetAZs '']
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-PublicSubnet2

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-PublicRouteTable

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  ECRRepository:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: !Sub ${EnvironmentName}-alarm-evaluator-repo
      ImageScanningConfiguration:
        ScanOnPush: true

  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub ${EnvironmentName}-alarm-evaluator-cluster

  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${EnvironmentName}-alarm-evaluator-task-exec-role
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy

  ECSTaskRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${EnvironmentName}-alarm-evaluator-task-role
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
            Condition:
              StringEquals:
                'aws:SourceAccount': !Ref AWS::AccountId
              ArnLike:
                'aws:SourceArn': !Sub arn:aws:ecs:${AWS::Region}:${AWS::AccountId}:*
      Policies:
        - PolicyName: AlarmEvaluatorPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - cloudwatch:DescribeAlarmHistory
                  - cloudwatch:DescribeAlarms
                  - cloudwatch:DescribeAlarmsForMetric
                  - cloudwatch:DescribeAnomalyDetectors
                  - cloudwatch:GetMetricData
                  - cloudwatch:GetMetricWidgetImage
                  - cloudwatch:GetService
                Resource: '*'
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                Resource: !GetAtt AlarmEvaluatorTable.Arn
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                Resource: !GetAtt AlarmDescriptionTable.Arn
              - Effect: Allow
                Action:
                  - bedrock:InvokeModel
                Resource: '*'


  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub ${EnvironmentName}-alarm-evaluator-task
      RequiresCompatibilities:
        - FARGATE
      NetworkMode: awsvpc
      Cpu: '256'
      Memory: '512'
      ExecutionRoleArn: !GetAtt ECSTaskExecutionRole.Arn
      TaskRoleArn: !GetAtt ECSTaskRole.Arn
      ContainerDefinitions:
        - Name: alarm-evaluator
          Image: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${ECRRepository}:latest
          PortMappings:
            - ContainerPort: 80
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref LogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: ecs
          Environment:
            - Name: DYNAMODB_TABLE
              Value: alarm-evaluator
            - Name: DYNAMODB_DESCRIPTION_TABLE
              Value: alarm-description
            - Name: AWS_REGION
              Value: !Ref AWS::Region
            - Name: AWS_BEDROCK_REGION
              Value: !Ref BedrockRegion

  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /ecs/${EnvironmentName}-alarm-evaluator
      RetentionInDays: 30

  AlarmEvaluatorTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: alarm-evaluator
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-alarm-evaluator

  AlarmDescriptionTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: alarm-description
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-alarm-description

  CodeBuildServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: codebuild.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryPowerUser
      Policies:
        - PolicyName: CodeBuildBasePolicy-alarm-evaluator
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Resource:
                  - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/*
                  - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/*:*
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
              - Effect: Allow
                Resource: '*'
                Action:
                  - ecs:DescribeTaskDefinition
                  - ecs:RegisterTaskDefinition
                  - ecs:ListTaskDefinitions
              - Effect: Allow
                Resource:
                  - !Sub arn:aws:iam::${AWS::AccountId}:role/${EnvironmentName}-alarm-evaluator-task-exec-role
                  - !Sub arn:aws:iam::${AWS::AccountId}:role/${EnvironmentName}-alarm-evaluator-task-role
                Action:
                  - iam:PassRole

  CodeBuildProject:
    Type: AWS::CodeBuild::Project
    DependsOn: ECSCluster
    Properties:
      Name: !Sub ${EnvironmentName}-alarm-evaluator
      ServiceRole: !GetAtt CodeBuildServiceRole.Arn
      Artifacts:
        Type: NO_ARTIFACTS
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/amazonlinux2-x86_64-standard:4.0
        PrivilegedMode: true
        EnvironmentVariables:
          - Name: AWS_DEFAULT_REGION
            Value: !Ref AWS::Region
          - Name: AWS_ACCOUNT_ID
            Value: !Ref AWS::AccountId
          - Name: ECR_REPO_NAME
            Value: !Ref ECRRepository
          - Name: S3_BUCKET
            Value: !Ref S3BucketName
          - Name: S3_SOURCE_FILE
            Value: !Ref S3SourceFile
          - Name: TASK_DEFINITION_FAMILY
            Value: !Sub ${EnvironmentName}-alarm-evaluator-task
      Source:
        Type: NO_SOURCE
        BuildSpec: |
          version: 0.2
          phases:
            pre_build:
              commands:
                - aws s3 cp s3://${S3_BUCKET}/${S3_SOURCE_FILE} .
                - aws ecr get-login-password --region ${AWS_DEFAULT_REGION} | docker login --username AWS --password-stdin ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com
                - REPOSITORY_URI=${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${ECR_REPO_NAME}
                - COMMIT_HASH=$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | cut -c 1-7)
                - IMAGE_TAG=${COMMIT_HASH:=latest}
            build:
              commands:
                - echo Build started on `date`
                - echo Building the Docker image...
                - |
                  cat << EOF > Dockerfile
                  FROM python:3.12-slim
                  WORKDIR /app
                  RUN apt-get update && \
                      apt-get upgrade -y && \
                      apt-get install -y --no-install-recommends gcc && \
                      pip install --no-cache-dir boto3 && \
                      apt-get clean && \
                      rm -rf /var/lib/apt/lists/*
                  COPY alarm_evaluator.py .
                  CMD ["python", "alarm_evaluator.py"]
                  EOF
                - docker build -t $REPOSITORY_URI:latest .
                - docker tag $REPOSITORY_URI:latest $REPOSITORY_URI:$IMAGE_TAG
            post_build:
                commands:
                - echo Build completed on `date`
                - echo Pushing the Docker image...
                - docker push $REPOSITORY_URI:latest
                - docker push $REPOSITORY_URI:$IMAGE_TAG
                - echo Updating ECS task definition...
                - TASK_DEFINITION=$(aws ecs describe-task-definition --task-definition $TASK_DEFINITION_FAMILY --query 'taskDefinition' --output json)
                - NEW_TASK_DEFINITION=$(echo $TASK_DEFINITION | jq --arg IMAGE "$REPOSITORY_URI:$IMAGE_TAG" '.containerDefinitions[0].image = $IMAGE | del(.taskDefinitionArn) | del(.revision) | del(.status) | del(.requiresAttributes) | del(.compatibilities) | del(.registeredAt) | del(.registeredBy)')
                - echo "$NEW_TASK_DEFINITION" > task-definition.json
                - aws ecs register-task-definition --cli-input-json "$(echo $NEW_TASK_DEFINITION)"
                - echo "New task definition registered"
      Cache:
        Type: NO_CACHE

  ECSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for ECS tasks
      VpcId: !Ref VPC
      SecurityGroupIngress: []
      SecurityGroupEgress:
        - IpProtocol: "-1"
          FromPort: -1
          ToPort: -1
          CidrIp: 0.0.0.0/0

  CustomWidgetLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: DynamoDBScanAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:Scan
                Resource: !GetAtt AlarmEvaluatorTable.Arn

  CustomWidgetLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub ${EnvironmentName}-customWidget-report
      Handler: index.handler
      Role: !GetAtt CustomWidgetLambdaRole.Arn
      Code:
        ZipFile: |
          import json
          import boto3
          from datetime import datetime

          def handler(event, context):

              dynamodb = boto3.resource('dynamodb')
              table = dynamodb.Table('alarm-evaluator')

              response = table.scan()
              items = response.get('Items', [])

              html = '''
              <style>
                table { width: 100%; border-collapse: collapse; }
                th, td { padding: 8px; text-align: left; border: 1px solid #ddd; }
                th { background-color: #f2f2f2; }
                tr:nth-child(even) { background-color: #f9f9f9; }
              </style>
              <table>
                <tr>
                  <th>Alarm Issue</th>
                  <th>Number of alarms</th>
                  <th>Alarm Names</th>
                </tr>
              '''
              alarm_issue={"no_description":"Alarms with no description",
                            "no_actions":"Alarms with no actions",
                            "long_lived_alarm_count":"Long sounding alarms",
                            "high_data_points":"Alarm set for too many data points",
                            "recurring_in_12_hours_count":"Alarms re-alerting within 12hrs",
                            "long_term_issue_count":"Alarms that occur daily",
                            "short_alarm_count":"Alarms closing within 2mins",
                            "high_threshold":"Alarm threshold set too high"}
              for item in items:
                  alarm_names=""
                  for alarm in item.get('alarm_list'):
                      alarm_name = alarm.get('AlarmName')
                      encoded_alarm_name = alarm_name.replace("/", "$2F")
                      alarm_url=f"https://console.aws.amazon.com/cloudwatch/home#alarmsV2:alarm/{encoded_alarm_name}"
                      alarm_names+= f"<a href={alarm_url}>{alarm_name}</a> | "
                  html += f'''
                  <tr>
                    <td>{alarm_issue.get(item.get('id', 'N/A'))}</td>
                    <td>{len(item['alarm_list'])}</td>
                    <td>{alarm_names[:-2]}</td>
                  </tr>
                  '''
              html += '</table>'

              return html
      Runtime: python3.12
      Timeout: 30
      MemorySize: 128

  AlarmDescriptionsWidgetLambda:
    Type: AWS::Lambda::Function

    Properties:
      FunctionName: !Sub ${EnvironmentName}-customWidget-alarmDescriptions
      Handler: index.handler
      Role: !GetAtt AlarmDescriptionsWidgetLambdaRole.Arn
      Code:
        ZipFile: |
          import json
          import boto3
          from datetime import datetime

          def handler(event, context):

              dynamodb = boto3.resource('dynamodb')
              table = dynamodb.Table('alarm-description')

              response = table.scan()
              items = response.get('Items', [])

              html = '''
              <style>
                table { width: 100%; border-collapse: collapse; }
                th, td { padding: 8px; text-align: left; border: 1px solid #ddd; }
                th { background-color: #f2f2f2; }
                tr:nth-child(even) { background-color: #f9f9f9; }
              </style>
              <table>
                <tr>
                  <th>Alarm Name</th>
                  <th>Current Description</th>
                  <th>Suggested Description</th>
                </tr>
              '''
              for item in items:
                  alarm_name=item.get('AlarmName')
                  encoded_alarm_name = alarm_name.replace("/", "$2F")
                  alarm_url=f"https://console.aws.amazon.com/cloudwatch/home#alarmsV2:alarm/{encoded_alarm_name}"
                  html += f'''
                  <tr>
                    <td><a href={alarm_url}>{alarm_name}</a></td>
                    <td>{item.get('AlarmDescription')}</td>
                    <td>{item.get('SuggestedDescription')}</td>
                  </tr>
                  '''
              html += '</table>'

              return html


      Runtime: python3.12
      Timeout: 30
      MemorySize: 128

  AlarmDescriptionsWidgetLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: DynamoDBAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:Scan
                  - dynamodb:Query
                  - dynamodb:GetItem
                Resource: !GetAtt AlarmDescriptionTable.Arn

  AlarmEvaluatorDashboard:
    Type: AWS::CloudWatch::Dashboard
    Properties:
      DashboardName: !Sub ${EnvironmentName}-alarm-evaluator-dashboard
      DashboardBody: !Sub |
        {
          "widgets": [
            {
              "type": "custom",
              "x": 0,
              "y": 0,
              "width": 18,
              "height": 10,
              "properties": {
                "title": "Alarm Evaluation Report",
                "endpoint": "${CustomWidgetLambda.Arn}",
                "updateOn": {
                  "refresh": true,
                  "resize": true,
                  "timeRange": false
                }
              }
            },
            {
              "type": "custom",
              "x": 0,
              "y": 6,
              "width": 18,
              "height": 10,
              "properties": {
                "title": "Suggested Alarm Descriptions",
                "endpoint": "${AlarmDescriptionsWidgetLambda.Arn}",
                "updateOn": {
                  "refresh": true,
                  "resize": true,
                  "timeRange": false
                },
                "parameters": {
                  "parameterType": "alarmSelector"
                }
              }
            },
            {
              "type": "text",
              "x": 18,
              "y": 0,
              "width": 6,
              "height": 14,
              "properties": {
                  "markdown": "# Explanation\n## What do the alarm issues mean?\n \nAlarm Issue | Explanation\n----|----- \nAlarms with no description | Alarms should have a meaninful description and a link to playbook/runbook.\nAlarms with no actions | Alarms with no actions configure - unless they are a part of a composite alerts, why have an alarm if you intend to take no action?  These are costly and likely pointless. \nLong sounding alarms | Consider why these alarms sound for long periods of time and do not close.  Are these genuinely long standing issues or just noisy alarms being ignored?\nAlarm set for too many data points | Alarms requiring review of thresholds as they have a high number of data points to hit before they alert.\nAlarms re-alerting within 12hrs | Alarms which alert several times in a month or week and repeat.  This may indicate that there is a long term fix is required.  \nAlarms that occur daily | Noisy alarms which imply that the issue is either not fixed long term or alarm is being ignored.\nAlarms closing within 2mins | Alarms which are alerting and then quickly closing themselves within a short space of time.  \nAlarm threshold set too high | The alarm treshold may be set too high and never sound.  Please review to make sure alarm is effective.\n\n\n"
              }
            }
          ]
        }

  SchedulerExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: scheduler.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: ExecuteECSTask
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ecs:RunTask
                Resource: !Sub arn:aws:ecs:${AWS::Region}:${AWS::AccountId}:task-definition/${EnvironmentName}-alarm-evaluator-task:*
              - Effect: Allow
                Action:
                  - iam:PassRole
                Resource:
                  - !GetAtt ECSTaskRole.Arn
                  - !GetAtt ECSTaskExecutionRole.Arn

  AlarmEvaluatorSchedule:
    Type: AWS::Scheduler::Schedule
    Properties:
      Name: !Sub ${EnvironmentName}-alarm-evaluator-schedule
      Description: 'Run alarm evaluator task every Monday at 7am'
      FlexibleTimeWindow:
        Mode: 'OFF'
      ScheduleExpression: 'cron(0 7 ? * MON *)'
      Target:
        Arn: !GetAtt ECSCluster.Arn
        RoleArn: !GetAtt SchedulerExecutionRole.Arn
        EcsParameters:
          TaskDefinitionArn: !Sub arn:aws:ecs:${AWS::Region}:${AWS::AccountId}:task-definition/${EnvironmentName}-alarm-evaluator-task
          TaskCount: 1
          LaunchType: FARGATE
          NetworkConfiguration:
            AwsvpcConfiguration:
              Subnets:
                - !Ref PublicSubnet1
                - !Ref PublicSubnet2
              SecurityGroups:
                - !Ref ECSSecurityGroup
              AssignPublicIp: ENABLED
      State: ENABLED